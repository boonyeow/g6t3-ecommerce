version: "3"

volumes:
  pgdata:
  kongadata:
  rabbitmq_data:

networks:
  kong-net:
    driver: bridge

services:
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    container_name: kong-database
    image: postgres:9.6
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    container_name: kong-migration
    build:
      context: ./kong-migration
      dockerfile: migration.Dockerfile
    volumes:
      - ./kong-migration/init.sh:/init.sh:ro
    entrypoint: sh -c "sleep 10 && kong migrations bootstrap -v && ./init.sh"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    container_name: kong
    image: kong:2.0.4
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-migration
      - kong-database
    ports:
      - "8001:8001"
      - "8000:8000"
      
  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    container_name: konga
    image: pantsel/konga
    restart: always
    networks:
      - kong-net
    depends_on:
      - kong
    ports:
      - "1337:1337"
    volumes:
      - ./konga/init_data.js:/app/init_data.js:ro
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: password
      DB_DATABASE: konga_db
      KONGA_SEED_USER_DATA_SOURCE_FILE: /app/init_data.js
      DEFAULT_NODE: http://kong:8001/

  #######################################
  # Authentication Service
  #######################################
  auth:
    container_name: auth
    build:
      context: ./auth
      dockerfile: auth.Dockerfile
    restart: always
    ports:
      - "5001:5001"
  
  #######################################
  # RabbitMQ: Messaging broker
  #######################################
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  #######################################
  # Mail: Mailing microservice
  #######################################
  mail:
    container_name: mail
    build:
      context: ./mail
      dockerfile: mail.Dockerfile
    image: alvinling2021/mail
    restart: always
    depends_on:
      - rabbitmq
    environment:
      - rabbit_host=rabbitmq
      - rabbit_port=5672
      - PYTHONUNBUFFERED=1

  #######################################
  # Review microservice
  #######################################
  review:
    container_name: review
    build:
      context: ./review
      dockerfile: review.Dockerfile
    image: alvinling2021/review
    restart: always
    ports:
      - "5100:8080"
  
  #######################################
  # Order microservice
  #######################################
  order:
    container_name: order
    build:
      context: ./order
      dockerfile: order.Dockerfile
    image: alvinling2021/order
    restart: always
    ports:
      - "5300:5300"
  
  #######################################
  # Product microservice
  #######################################
  product:
    container_name: product
    build:
      context: ./product
      dockerfile: product.Dockerfile
    image: alvinling2021/product
    restart: always
    ports:
      - "5400:5400"

  #######################################
  # Cart microservice
  #######################################
  cart:
    container_name: cart
    build:
      context: ./cart
      dockerfile: cart.Dockerfile
    image: alvinling2021/cart
    restart: always
    ports:
      - "5500:5500"

  #######################################
  # Payment microservice
  #######################################
  payment:
    container_name: payment
    build:
      context: ./payment
      dockerfile: payment.Dockerfile
    image: alvinling2021/payment
    restart: always
    ports:
      - "5700:5700"

  #######################################
  # Make a review complex microservice
  #######################################
  make_a_review:
    container_name: make_a_review
    build:
      context: ./make_a_review
      dockerfile: make_a_review.Dockerfile
    image: alvinling2021/make_a_review
    restart: always
    depends_on:
      - rabbitmq
      - order
      - review
      - product
      - mail
    environment:
      - REVIEW_URL=http://review:8080/review
      - ORDER_URL=http://order:5300/order
      - PRODUCT_URL=http://product:5400/product
      - PYTHONUNBUFFERED=1
      - rabbit_host=rabbitmq
      - rabbit_port=5672
    ports:
      - "5200:5200"

  #######################################
  # Place an order complex microservice
  #######################################
  place_an_order:
    container_name: place_an_order
    build:
      context: ./place_an_order
      dockerfile: place_an_order.Dockerfile
    image: alvinling2021/place_an_order
    restart: always
    depends_on:
      - rabbitmq
      - cart
      - order
      - product
      - payment
      - mail
    environment:
      - CART_URL=http://cart:5500/cart
      - PRODUCT_URL=http://product:5500/product
      - ORDER_URL=http://order:5500/order
      - PAYMENT_URL=http://payment:5500/payment
